// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WeatherAPI.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using WeatherAPI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using WeatherAPI.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\Pages\WeatherWidget.razor"
using WeatherAPI.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\Pages\WeatherWidget.razor"
using WeatherAPI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\Pages\WeatherWidget.razor"
using System.Text;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/weather")]
    public partial class WeatherWidget : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 37 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\Pages\WeatherWidget.razor"
       

    ForecastModel forecast = new ForecastModel();
    ForecastService forecastService = new ForecastService();
    WeatherDefinitions iconClass = new WeatherDefinitions();

    //string isDay = "day";
    string temp = "Loading" ;
    string tempUnits = "Loading";
    string shortForecast = "Loading";
    string weatherIconClass = "";
    string dateString = DateTime.Now.ToString("MMMM dd, yyyy");

    protected override async Task OnInitializedAsync()
    {

        forecast = await forecastService.GetForecastAsync();
        if (forecast != null)
        {
            if(forecast.properties != null)
            {
                if(forecast.properties.periods != null)
                {
                    bool iconFound = false;

                    temp = forecast.properties.periods[0].temperature.ToString();
                    tempUnits = forecast.properties.periods[0].temperatureUnit;
                    shortForecast = forecast.properties.periods[0].shortForecast;

                    if (!(forecast.properties.periods[0].isDaytime))
                    {
                        if (iconClass.NightWeatherDescription.ContainsKey(shortForecast))
                        {
                            weatherIconClass = iconClass.NightWeatherDescription[shortForecast];
                        }
                        else
                        {
                            foreach (var substring in shortForecast.Split(" "))
                            {
                                if (iconClass.NightWeatherDescription.ContainsKey(substring))
                                {
                                    weatherIconClass = iconClass.NightWeatherDescription[substring];
                                    iconFound = true;
                                }                                
                            }
                            if (!iconFound)
                            {
                                weatherIconClass = iconClass.NightWeatherDescription["KeyNotFound"];
                            }

                        }
                    }
                    else
                    {
                        if (iconClass.DayWeatherDescription.ContainsKey(shortForecast))
                        {
                            weatherIconClass = iconClass.DayWeatherDescription[shortForecast];
                        }
                        else
                        {
                            foreach (var substring in shortForecast.Split(" "))
                            {
                                if (iconClass.DayWeatherDescription.ContainsKey(substring))
                                {
                                    weatherIconClass = iconClass.DayWeatherDescription[substring];
                                    iconFound = true;
                                }
                            }

                            if (!iconFound)
                            {
                                weatherIconClass = iconClass.DayWeatherDescription["KeyNotFound"];
                            }
                        }
                    }
                }
            }
        }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
