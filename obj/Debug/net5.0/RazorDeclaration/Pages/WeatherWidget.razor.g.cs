// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WeatherAPI.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using WeatherAPI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\_Imports.razor"
using WeatherAPI.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\Pages\WeatherWidget.razor"
using WeatherAPI.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\Pages\WeatherWidget.razor"
using WeatherAPI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\Pages\WeatherWidget.razor"
using System.Text;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/weather")]
    public partial class WeatherWidget : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 36 "C:\Users\Vajane\source\repos\BlazorWeatherComponent\Pages\WeatherWidget.razor"
       

    ForecastModel _forecast = new ForecastModel();
    WeatherService _weatherservice = new WeatherService();
    WeatherModel _iconclass = new WeatherModel();

    //string isDay = "day";
    string temp = "Loading";
    string tempUnits = "Loading";
    string shortForecast = "Loading";
    string weatherIconClass = "";
    string dateString = DateTime.Now.ToString("MMMM dd, yyyy");

    protected override async Task OnInitializedAsync()
    {
        _forecast = await _weatherservice.GetWeatherAsync();
        if (_forecast != null)
        {
            if (_forecast.properties != null)
            {
                if (_forecast.properties.periods != null)
                {
                    bool iconFound = false;

                    temp = _forecast.properties.periods[0].temperature.ToString();
                    tempUnits = _forecast.properties.periods[0].temperatureUnit;
                    shortForecast = _forecast.properties.periods[0].shortForecast;

                    if (!(_forecast.properties.periods[0].isDaytime))
                    {
                        if (_iconclass.NightWeatherDescription.ContainsKey(shortForecast))
                        {
                            weatherIconClass = _iconclass.NightWeatherDescription[shortForecast];
                        }
                        else
                        {
                            foreach (var substring in shortForecast.Split(" "))
                            {
                                if (_iconclass.NightWeatherDescription.ContainsKey(substring))
                                {
                                    weatherIconClass = _iconclass.NightWeatherDescription[substring];
                                    iconFound = true;
                                }
                            }
                            if (!iconFound)
                            {
                                weatherIconClass = _iconclass.NightWeatherDescription["KeyNotFound"];
                            }

                        }
                    }
                    else
                    {
                        if (_iconclass.DayWeatherDescription.ContainsKey(shortForecast))
                        {
                            weatherIconClass = _iconclass.DayWeatherDescription[shortForecast];
                        }
                        else
                        {
                            foreach (var substring in shortForecast.Split(" "))
                            {
                                if (_iconclass.DayWeatherDescription.ContainsKey(substring))
                                {
                                    weatherIconClass = _iconclass.DayWeatherDescription[substring];
                                    iconFound = true;
                                }
                            }

                            if (!iconFound)
                            {
                                weatherIconClass = _iconclass.DayWeatherDescription["KeyNotFound"];
                            }
                        }
                    }
                }
            }
        }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
